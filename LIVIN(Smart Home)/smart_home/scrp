const API_BASE = "<?php echo 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']; ?>?api=";
const SMOKE_THRESHOLD = 250;
const MAX_SMOKE_VALUE = 1000; // Maximum expected smoke sensor value
const MAX_TEMP = 50; // Maximum expected temperature in °C
const MAX_HUMIDITY = 100;

// Global variables to store last sensor readings
let lastTemperature = 0;
let lastHumidity = 0;

document.addEventListener("DOMContentLoaded", function () {
  // Create gauge marks and numbers
  createGaugeMarks();
  loadInitialState();
  setInterval(updateStatus, 1000);

  // Try to discover NodeMCU IP
  discoverNodeMCU();
});

async function loadInitialState() {
  try {
    // Show loading state
    document.getElementById("relay1Sch").textContent = "Loading...";
    document.getElementById("relay2Sch").textContent = "Loading...";

    // Fetch initial state
    const response = await fetch(`${API_BASE}db/status`);
    if (!response.ok) {
      throw new Error("Failed to load initial state");
    }
    const data = await response.json();
    updateUI(data);

    if (data.alert_active) {
      document.getElementById("smokeAlert").style.display = "flex";
    }
  } catch (error) {
    console.error("Error loading initial state:", error);
    // Fall back to default "Not set" if loading fails
    document.getElementById("relay1Sch").textContent = "Not set";
    document.getElementById("relay2Sch").textContent = "Not set";
  }
}

function createGaugeMarks() {
  const marksContainer = document.getElementById("gaugeMarks");
  const numbersContainer = document.getElementById("gaugeNumbers");

  // Create marks every 30 degrees (12 marks total)
  for (let i = 0; i <= 180; i += 30) {
    // Create mark
    const mark = document.createElement("div");
    mark.className = "gauge-mark";
    mark.style.transform = `rotate(${i - 90}deg) translateY(-90px)`;
    marksContainer.appendChild(mark);

    // Create number (only for every 60 degrees)
    if (i % 60 === 0) {
      const number = document.createElement("div");
      number.className = "gauge-number";
      const value = Math.round((i / 180) * MAX_SMOKE_VALUE);
      number.textContent = value;

      // Position the number
      const angle = ((i - 90) * Math.PI) / 180;
      const radius = 85;
      const x = 50 + radius * Math.cos(angle);
      const y = 50 + radius * Math.sin(angle);
      number.style.left = `${x}%`;
      number.style.top = `${y}%`;

      numbersContainer.appendChild(number);
    }
  }
}

let lastToggleTime = 0;
async function toggleRelay(r) {
  // Save current time before making the request
  const relay1Sch = document.getElementById("relay1Sch").textContent;
  const relay2Sch = document.getElementById("relay2Sch").textContent;
  const currentTime = document.getElementById("currentTime").textContent;
  const now = Date.now();
  if (now - lastToggleTime < 500) return; // 500ms debounce
  lastToggleTime = now;

  try {
    const response = await fetch(`${API_BASE}relays/${r}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error);
    }

    const data = await response.json();
    // If no time in response, use the preserved time
    if (!data.relay1_schedule) data.relay1_schedule = relay1Sch;
    if (!data.relay2_schedule) data.relay2_schedule = relay2Sch;
    if (!data.time) data.time = currentTime;
    updateUI(data);
  } catch (error) {
    console.error("Error:", error);
    alert(`Failed to toggle relay: ${error.message}`);
  }
}

function validateHourInput(input) {
  const value = parseInt(input.value);
  if (isNaN(value) || value < 1 || value > 12) {
    input.value = "";
    alert("Hour must be between 1 and 12");
    input.focus();
    return false;
  }
  return true;
}

function validateMinuteInput(input) {
  const value = parseInt(input.value);
  if (isNaN(value) || value < 0 || value > 59) {
    input.value = "";
    alert("Minute must be between 0 and 59");
    input.focus();
    return false;
  }
  return true;
}

async function setSchedule() {
  const data = {
    on_hour: document.getElementById("on_hour").value,
    on_minute: document.getElementById("on_minute").value,
    on_ampm: document.getElementById("on_ampm").value,
    off_hour: document.getElementById("off_hour").value,
    off_minute: document.getElementById("off_minute").value,
    off_ampm: document.getElementById("off_ampm").value,
    relay: document.getElementById("relaySelect").value,
  };

  if (!data.on_hour || !data.on_minute || !data.off_hour || !data.off_minute) {
    alert("Please fill in all time fields");
    return;
  }

  try {
    const response = await fetch(`${API_BASE}db/schedules`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error);
    }

    const result = await response.json();

    if (result.relay1_schedule) {
      document.getElementById("relay1Sch").textContent = result.relay1_schedule;
    }
    if (result.relay2_schedule) {
      document.getElementById("relay2Sch").textContent = result.relay2_schedule;
    }

    alert("Schedule set successfully");
    updateStatus();
  } catch (error) {
    console.error("Error:", error);
    alert(`Failed to set schedule: ${error.message}`);
  }
}

async function resetAlert() {
  try {
    const response = await fetch(`${API_BASE}db/alerts`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Failed to reset alert");
    }

    const result = await response.json();

    // Manually hide the alert when reset is clicked
    document.getElementById("smokeAlert").style.display = "none";

    // Update the status to reflect the alert is no longer active
    updateStatus();

    // Show success message if needed
    if (result.message) {
      console.log(result.message);
    }
  } catch (error) {
    console.error("Error:", error);
    alert(`Failed to reset alert: ${error.message}`);
  }
}

async function updateStatus() {
  try {
    const response = await fetch(`${API_BASE}db/status`);
    if (!response.ok) {
      throw new Error("Failed to get status");
    }
    const data = await response.json();
    updateUI(data);
  } catch (error) {
    console.error("Error fetching status:", error);
  }
}

function updateUI(data) {
    // Update relay buttons
    const relay1Btn = document.getElementById('relay1Btn');
    const relay2Btn = document.getElementById('relay2Btn');
    
    if (data.relay1 !== undefined) {
        const relayState = relay1Btn.querySelector('.relay-state');
        if (relayState) {
            relayState.textContent = data.relay1 ? 'ON' : 'OFF';
        }
        relay1Btn.className = `relay-toggle ${data.relay1 ? 'relay-on' : 'relay-off'}`;
    }
    
    if (data.relay2 !== undefined) {
        const relayState = relay2Btn.querySelector('.relay-state');
        if (relayState) {
            relayState.textContent = data.relay2 ? 'ON' : 'OFF';
        }
        relay2Btn.className = `relay-toggle ${data.relay2 ? 'relay-on' : 'relay-off'}`;
    }
    
    // Update temperature
    if (data.temperature !== undefined) {
        lastTemperature = data.temperature;
        const tempValue = Math.min(lastTemperature, MAX_TEMP);
        const tempDisplay = document.getElementById('tempValue');
        const tempFluid = document.getElementById('tempFluid');
        
        // Update thermometer fluid height (0-60px for 0-50°C)
        const fluidHeight = Math.min((tempValue / MAX_TEMP) * 60, 60);
        tempFluid.style.height = `${fluidHeight}px`;
        
        // Update numeric display
        tempDisplay.textContent = tempValue.toFixed(1);
        
        // Change thermometer bulb color based on value
        const thermometerBulb = document.querySelector('.thermometer-bulb');
        if (thermometerBulb) {
            if (tempValue < 20) {
                thermometerBulb.style.background = '#4CAF50'; // Cool
                thermometerBulb.style.borderColor = '#2E7D32';
            } else if (tempValue < 30) {
                thermometerBulb.style.background = '#FFC107'; // Warm
                thermometerBulb.style.borderColor = '#FFA000';
            } else {
                thermometerBulb.style.background = '#f44336'; // Hot
                thermometerBulb.style.borderColor = '#d32f2f';
            }
        }
    }
    
    // Update humidity
    if (data.humidity !== undefined) {
        lastHumidity = data.humidity;
        const humidityValue = Math.min(lastHumidity, MAX_HUMIDITY);
        const humidityDisplay = document.getElementById('humidityValue');
        
        // Update numeric display
        humidityDisplay.textContent = humidityValue.toFixed(1);
        
        // Change raindrop color based on value
        const raindrops = document.querySelectorAll('.raindrop');
        if (raindrops.length > 0) {
            if (humidityValue < 30) {
                raindrops.forEach(drop => drop.style.background = '#F44336'); // Dry
            } else if (humidityValue < 70) {
                raindrops.forEach(drop => drop.style.background = '#2196F3'); // Comfortable
            } else {
                raindrops.forEach(drop => drop.style.background = '#0D47A1'); // Humid
            }
        }
    }
    
    // Update schedule display
    if (data.relay1_schedule !== undefined) {
        document.getElementById('relay1Sch').textContent =
            data.relay1_schedule || 'Not set';
    }
    if (data.relay2_schedule !== undefined) {
        document.getElementById('relay2Sch').textContent =
            data.relay2_schedule || 'Not set';
    }
    
    // Update other status elements
    if (data.time !== undefined) {
        document.getElementById('currentTime').textContent = data.time || '--:--:-- --';
    }
    
    // Update smoke level with circular gauge
    if (data.smoke_value !== undefined) {
        const smokeValue = Math.min(data.smoke_value, MAX_SMOKE_VALUE);
        const smokeDisplay = document.getElementById('smokeValue');
        const gaugeFill = document.getElementById('smokeGaugeFill');
        
        // Calculate rotation (0-180 degrees)
        const rotation = (smokeValue / MAX_SMOKE_VALUE) * 180;
        gaugeFill.style.transform = `rotate(${rotation - 90}deg)`;
        
        // Update numeric display
        smokeDisplay.textContent = smokeValue;
        
        // Change color based on value
        if (smokeValue < SMOKE_THRESHOLD * 0.5) {
            smokeDisplay.className = 'gauge-value safe';
        } else if (smokeValue < SMOKE_THRESHOLD) {
            smokeDisplay.className = 'gauge-value warning';
        } else {
            smokeDisplay.className = 'gauge-value danger';
        }
        
        // Only show alert when smoke is detected
        if (smokeValue >= SMOKE_THRESHOLD) {
            document.getElementById('smokeAlert').style.display = 'flex';
        }
    }
}

function confirmLogout(event) {
  event.preventDefault(); // Prevent default link behavior
  const confirmation = confirm("Do you want to logout?");
  if (confirmation) {
      window.location.href = "logout.php"; // Redirect to logout.php if confirmed
  }
}


<?php
// [Previous headers and configuration remain the same...]

// Main API endpoint handler - Optimized version
function handleApiRequest() {
    $endpoint = $_GET['api'] ?? '';
    $method = $_SERVER['REQUEST_METHOD'];
    
    // Immediately forward NodeMCU-specific requests
    if (strpos($endpoint, 'nodemcu/') === 0) {
        forwardToNodeMCU(substr($endpoint, 8));
    }
    
    // Handle database operations with faster response
    $conn = getDBConnection();
    try {
        switch ($endpoint) {
            case 'db/status':
                handleStatusRequest($conn);
                break;
                
            case 'db/relays':
                if ($method === 'PUT') {
                    // Optimized relay handling - update DB and return immediately
                    $input = json_decode(file_get_contents('php://input'), true);
                    $relay = (int)($input['relay'] ?? 0);
                    $state = isset($input['state']) ? (int)$input['state'] : null;
                    
                    if ($relay < 1 || $relay > 2) {
                        throw new Exception("Invalid relay number");
                    }
                    
                    if ($state === null) {
                        // Toggle state
                        $stmt = $conn->prepare("SELECT state FROM relays WHERE relay_number = ?");
                        $stmt->bind_param("i", $relay);
                        $stmt->execute();
                        $result = $stmt->get_result();
                        $current = $result->fetch_assoc();
                        $state = $current['state'] ? 0 : 1;
                    }
                    
                    $stmt = $conn->prepare("UPDATE relays SET state = ? WHERE relay_number = ?");
                    $stmt->bind_param("ii", $state, $relay);
                    $stmt->execute();
                    
                    // Return immediate response without waiting for NodeMCU
                    echo json_encode([
                        "status" => "OK",
                        "relay" => $relay,
                        "state" => $state,
                        "timestamp" => microtime(true)
                    ]);
                } else {
                    http_response_code(405);
                    echo json_encode(["error" => "Method not allowed"]);
                }
                break;
                
            // [Other endpoints remain the same...]
        }
    } catch (Exception $e) {
        http_response_code(500);
        echo json_encode(["error" => $e->getMessage()]);
    } finally {
        $conn->close();
    }
}

// [Rest of the file remains the same...]